import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { RootState, AppThunk } from "../../app/store";
import { getMe, login } from "./authAPI";

export interface AuthState {
  isLoggedIn: Boolean;
  token: String;
  value: {
    fistName: String;
    lastName: String;
    email: String;
  };
  status: "idle" | "loading" | "failed";
}

const initialState: AuthState = {
  isLoggedIn: false,
  token: "",
  value: {
    fistName: "",
    lastName: "",
    email: "",
  },
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginAsync = createAsyncThunk(
  "login",
  (inputs: { email: string; password: string }) => {
    const res = login(inputs);
    return res;
  }
);

export const getMeAsync = createAsyncThunk("getMe", (token: string) => {
  const res = getMe(token);
  return res;
});

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state) => {
      state.token = "";
      state.isLoggedIn = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.token = action.payload;
      })
      .addCase(loginAsync.rejected, (state) => {
        state.isLoggedIn = false;
        state.token = "";
        state.value.fistName = "";
        state.value.lastName = "";
        state.value.email = "";
        state.status = "failed";
      })
      .addCase(getMeAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getMeAsync.fulfilled, (state, action) => {
        state.isLoggedIn = true;
        state.value.fistName = action.payload.firstName;
        state.value.lastName = action.payload.lastName;
        state.value.email = action.payload.email;
        state.status = "idle";
      })
      .addCase(getMeAsync.rejected, (state) => {
        state.isLoggedIn = false;
        state.token = "";
        state.value.fistName = "";
        state.value.lastName = "";
        state.value.email = "";
        state.status = "idle";
      });
  },
});

export const { logout } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const selectAuth = (state: any) => {
  return state.auth;
};

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default authSlice.reducer;
